{"meta":{"title":"mrqyTalk","subtitle":"","description":"","author":"吴同学","url":"https://mrqytalk.github.io","root":"/"},"pages":[{"title":"关于","date":"2022-04-14T03:13:06.822Z","updated":"2022-04-14T03:13:06.822Z","comments":false,"path":"about/index.html","permalink":"https://mrqytalk.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"404 Not Found：该页无法显示","date":"2022-04-14T03:13:06.820Z","updated":"2022-04-14T03:13:06.820Z","comments":false,"path":"/404.html","permalink":"https://mrqytalk.github.io/404.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-04-17T06:24:55.940Z","updated":"2022-04-17T06:24:55.940Z","comments":false,"path":"links/index.html","permalink":"https://mrqytalk.github.io/links/index.html","excerpt":"","text":""},{"title":"书单","date":"2022-04-14T03:13:06.823Z","updated":"2022-04-14T03:13:06.823Z","comments":false,"path":"books/index.html","permalink":"https://mrqytalk.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-04-16T12:25:45.369Z","updated":"2022-04-16T00:08:36.553Z","comments":false,"path":"categories/index.html","permalink":"https://mrqytalk.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-04-16T00:36:54.461Z","updated":"2022-04-16T00:36:54.461Z","comments":false,"path":"tags/index.html","permalink":"https://mrqytalk.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-04-14T03:13:06.826Z","updated":"2022-04-14T03:13:06.826Z","comments":false,"path":"repository/index.html","permalink":"https://mrqytalk.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"mysql索引","slug":"mysql索引","date":"2022-04-17T03:57:26.000Z","updated":"2022-04-17T04:04:21.178Z","comments":false,"path":"2022/04/17/mysql索引/","link":"","permalink":"https://mrqytalk.github.io/2022/04/17/mysql%E7%B4%A2%E5%BC%95/","excerpt":"","text":"1. Mysql索引简介1.1 索引概念索引是一个单独的、存储在磁盘上的、排好序数据库结构，它们包含着对数据表里所有记录的引用指针。使用索引的功能在于快速找出在某个或多个列中有一特定值的行。 1.2 索引的分类按数据结构分类可分为：B+tree索引、Hash索引、Full-text索引按物理存储分类可分为：聚簇索引、二级索引按字段特性分类可分为：主键索引、普通索引、前缀索引按字段个数分类可分为：单列索引、联合索引 注：MySQL的索引类型由存储引擎决定，Mysql5.1之前的默认引擎是MyISAM，之后版本是InnoDB。而InnoDB你支持hash索引，但自适应Hash索引，即：InnoDB中Hash索引的创建由存储引擎引擎自动优化创建，不能人为干预是否为表创建Hash索引。因为hash索引只能精确匹配（如select * from user where name &#x3D; xx），不支持范围查找。 2. B+树2.1 B+树的特点 在 B+ 树中，所有数据记录节点都是按照键值的大小存放在同一层的叶子节点上，而非叶子结点只存储key的信息，这样可以大大减少每个节点的存储的key的数量，降低B+ 树的高度 B+ 树叶子节点的关键字从小到大有序排列，左边结尾数据都会保存右边节点开始数据的指针。 B+ 树的层级更少：相较于 B 树， B+ 每个非叶子节点存储的关键字数更多，树的层级更少所以查询数据更快 B+ 树查询速度更稳定：B+ 所有关键字数据地址都存在叶子节点上，所以每次查找的次数都相同所以查询速度要比B树更稳定; B+ 树天然具备排序功能：B+ 树所有的叶子节点数据构成了一个有序链表，在查询大小区间的数据时候更方便，数据紧密性很高，缓存的命中率也会比B树高。 B+ 树全节点遍历更快：B+ 树遍历整棵树只需要遍历所有的叶子节点即可，而不需要像 B 树一样需要对每一层进行遍历，这有利于数据库做全表扫描。 2.2 B+树的结构图 Mysql存储的时候以数据页为最小单位，数据页与数据页之间通过双向链表关联，数据与数据页之间通过单项链表关联。 数据页中的数据是按照主键排序（没有主键是由 MySQL自己维护的 ROW_ID 来排序的），每一个数据页中的页号和最小主键构成主键目录。 索引页+数据页组成的组成的B+树就是聚簇索引。聚簇索引是 MySQL 基于主键索引结构创建的。 模拟 MySQL 的查找过程，首先从最顶层的索引页开始查找，查找 id&#x3D;37，因此定位到了索引页16，然后到索引页 16 中继续查找，此时同样能够定位到 id&#x3D;37 在索引页 3 中，然后继续查找，最终能够定位到数据实在数据页 8 中，加入数据页中8的结构如下： 完整的数据表： 3. 非主键索引假如现在对name+age(非主键)建立索引，那此时是存放的呢？此时 MySQL 根据会 name+age 维护一个单独的 B+ 树结构，数据依旧是存放在数据页中的，只不过是原来数据中的每条记录写的是 id&#x3D;xx，现在写的是name&#x3D;xx，age&#x3D;xx，id&#x3D;xx，不管怎么样，主键肯定会存放的。 在插入数据的时候，MySQL 首先会根据 name 进行排序，如果 name 一样，就根据联合索引中的 age 去排序，如果还一样，那么就会根据 主键 字段去排序。插入的原理就是这样子的。 假设现在要根据 name 查找到该条记录，且查询的字段（即 select 后面的查询字段）也仅仅有 name（只要是在 name,age,id 这三个字段中都可以）这个时候是能够直接获取到最终的记录的。 但如果查找的sql语句如下： 1SELECT * FROM student WHERE name=&#x27;wx&#x27; 那这下子就完蛋了，因为现在虽然根据 name 很快的定位到了该条记录，但是因为 name+age 不是聚簇索引，此时的 B+ 树的数据页中存放的仅仅是自己关联的索引和主键索引字段，并不会存其他的字段，所以这个时候其他的属性值是获取不到的，这时候该怎么办？ 这种情况下，MySQL 就需要进行回表查询了。此时 MySQL 就会根据定位到的某条记录中的 id 再次进行聚簇索引查找，也就是说会根据 id 去维护 id 的 B+ 树中查找。因为聚簇索引中数据页记录的是一条记录的完整的记录，这个过程就叫回表。 回表的含义：根据非主键索引查询到的结果并没有查找的字段值，此时就需要再次根据主键从聚簇索引的根节点开始查找，这样再次查找到的记录才是完成的。","categories":[{"name":"数据库","slug":"数据库","permalink":"https://mrqytalk.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"https://mrqytalk.github.io/tags/Mysql/"}]},{"title":"银行家算法","slug":"银行家算法","date":"2022-04-16T12:20:20.000Z","updated":"2022-04-16T13:40:44.418Z","comments":false,"path":"2022/04/16/银行家算法/","link":"","permalink":"https://mrqytalk.github.io/2022/04/16/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/","excerpt":"","text":"1. 银行家算法概念1.1 介绍银行家算法（Banker’s Algorithm）是一个避免操作系统死锁（Deadlock）的著名算法，属于事先预防策略。它以银行借贷系统的分配策略为基础，判断并保证系统的安全运行。 死锁：当两个以上的运算单元，双方都在等待对方停止执行，以获取系统资源，但是没有一方提前退出时，就称为死锁。 产生死锁必须同时满足以下四个条件： 禁止抢占（no preemption）：系统资源不能被强制从一个进程中退出。 持有和等待（hold and wait）：一个进程可以在等待时持有系统资源。 互斥（mutual exclusion）：资源只能同时分配给一个行程，无法多个行程共享。 循环等待（circular waiting）：一系列进程互相持有其他进程所需要的资源。 因此，预防死锁需要打破其中一项。 1.2 概括当一个进程申请使用资源的时候，银行家算法通过先 试探 分配给该进程资源，然后通过安全性算法判断分配后的系统是否处于安全状态，若判断结果为安全，则给该进程分配资源，若不安全则试探分配作废，让该进程阻塞。 安全系列不唯一，但只要存在一个就是安全策略，一定不会发生死锁 2. 银行家算法具体实现2.1 术语概念available:可用资源向量，记录系统中各类资源的当前可利用数目 allocation:记录每个进程中对各类资源当前的占有量 max:记录每个进程对各类资源的最大需求量 need: 记录每个进程中对各类资源当前的需求量，等于max-allocation request: 请求向量，记录某个进程当前对各类资源的申请量，是银行家算法的入口参数。 2.2 过程2.2.1 先决条件过程 request[i,j]&lt;need[i,j]，否则进程出错 request[i,j]&lt;available[i,j]，否认进程阻塞 2.2.2 试探分配过程 系统试着把资源分配给进程P，并对相应数据结构作如下修改： available[i,j] -request[i,j] allocation[i,j]+request[i,j] need[i,j]-request[i,j] 系统执行安全性检测子算法，以判断试分配后系统状态是否安全； 若第4步返回逻辑真值，即“安全”，则完成本次分配，返回； 否则，撤销此次（即第3步中的）试分配，进程P阻塞。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://mrqytalk.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://mrqytalk.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"操作系统","slug":"操作系统","permalink":"https://mrqytalk.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]}],"categories":[{"name":"数据库","slug":"数据库","permalink":"https://mrqytalk.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"操作系统","slug":"操作系统","permalink":"https://mrqytalk.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"https://mrqytalk.github.io/tags/Mysql/"},{"name":"算法","slug":"算法","permalink":"https://mrqytalk.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"操作系统","slug":"操作系统","permalink":"https://mrqytalk.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]}