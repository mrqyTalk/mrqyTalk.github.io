{"meta":{"title":"mrqyTalk","subtitle":"","description":"","author":"吴同学","url":"https://mrqytalk.github.io","root":"/"},"pages":[{"title":"Repositories","date":"2022-04-14T03:13:06.826Z","updated":"2022-04-14T03:13:06.826Z","comments":false,"path":"repository/index.html","permalink":"https://mrqytalk.github.io/repository/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2022-04-14T03:13:06.820Z","updated":"2022-04-14T03:13:06.820Z","comments":false,"path":"/404.html","permalink":"https://mrqytalk.github.io/404.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-04-16T01:40:22.081Z","updated":"2022-04-14T03:13:06.825Z","comments":true,"path":"links/index.html","permalink":"https://mrqytalk.github.io/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-04-16T12:25:45.369Z","updated":"2022-04-16T00:08:36.553Z","comments":false,"path":"categories/index.html","permalink":"https://mrqytalk.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-04-16T00:36:54.461Z","updated":"2022-04-16T00:36:54.461Z","comments":false,"path":"tags/index.html","permalink":"https://mrqytalk.github.io/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-04-14T03:13:06.822Z","updated":"2022-04-14T03:13:06.822Z","comments":false,"path":"about/index.html","permalink":"https://mrqytalk.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2022-04-14T03:13:06.823Z","updated":"2022-04-14T03:13:06.823Z","comments":false,"path":"books/index.html","permalink":"https://mrqytalk.github.io/books/index.html","excerpt":"","text":""}],"posts":[{"title":"银行家算法","slug":"银行家算法","date":"2022-04-16T12:20:20.000Z","updated":"2022-04-16T13:40:44.418Z","comments":false,"path":"2022/04/16/银行家算法/","link":"","permalink":"https://mrqytalk.github.io/2022/04/16/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/","excerpt":"","text":"1. 银行家算法概念1.1 介绍银行家算法（Banker’s Algorithm）是一个避免操作系统死锁（Deadlock）的著名算法，属于事先预防策略。它以银行借贷系统的分配策略为基础，判断并保证系统的安全运行。 死锁：当两个以上的运算单元，双方都在等待对方停止执行，以获取系统资源，但是没有一方提前退出时，就称为死锁。 产生死锁必须同时满足以下四个条件： 禁止抢占（no preemption）：系统资源不能被强制从一个进程中退出。 持有和等待（hold and wait）：一个进程可以在等待时持有系统资源。 互斥（mutual exclusion）：资源只能同时分配给一个行程，无法多个行程共享。 循环等待（circular waiting）：一系列进程互相持有其他进程所需要的资源。 因此，预防死锁需要打破其中一项。 1.2 概括当一个进程申请使用资源的时候，银行家算法通过先 试探 分配给该进程资源，然后通过安全性算法判断分配后的系统是否处于安全状态，若判断结果为安全，则给该进程分配资源，若不安全则试探分配作废，让该进程阻塞。 安全系列不唯一，但只要存在一个就是安全策略，一定不会发生死锁 2. 银行家算法具体实现2.1 术语概念available:可用资源向量，记录系统中各类资源的当前可利用数目 allocation:记录每个进程中对各类资源当前的占有量 max:记录每个进程对各类资源的最大需求量 need: 记录每个进程中对各类资源当前的需求量，等于max-allocation request: 请求向量，记录某个进程当前对各类资源的申请量，是银行家算法的入口参数。 2.2 过程2.2.1 先决条件过程 request[i,j]&lt;need[i,j]，否则进程出错 request[i,j]&lt;available[i,j]，否认进程阻塞 2.2.2 试探分配过程 系统试着把资源分配给进程P，并对相应数据结构作如下修改： available[i,j] -request[i,j] allocation[i,j]+request[i,j] need[i,j]-request[i,j] 系统执行安全性检测子算法，以判断试分配后系统状态是否安全； 若第4步返回逻辑真值，即“安全”，则完成本次分配，返回； 否则，撤销此次（即第3步中的）试分配，进程P阻塞。","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://mrqytalk.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://mrqytalk.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"操作系统","slug":"操作系统","permalink":"https://mrqytalk.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"JavaWeb笔记","slug":"JavaWeb笔记","date":"2022-04-15T11:53:47.000Z","updated":"2022-04-16T13:46:06.575Z","comments":false,"path":"2022/04/15/JavaWeb笔记/","link":"","permalink":"https://mrqytalk.github.io/2022/04/15/JavaWeb%E7%AC%94%E8%AE%B0/","excerpt":"","text":"一、servlet1、servlet继承关系及参数1）继承关系：Httpservlet-&gt;Genericservlet-&gt;Servlet 2）Servlet中的核心方法：init（），service（），destroy（） 3）服务方法：当有请求过来时，service方法会自动响应（其实是tomcat容器调用的），在HttpServlet中我们会去分析请求的方式：到底是get、post、head还是delete等等，然后再决定调用的是哪个do开头的方法，那么在HttpServlet中这些do方法默认都是405的实现风格—–要我们子类去实现对应的方法，否则默认会报405错误。 4）因此，我们在新建servlet时，我们才会去考虑请求方法，从而决定重写哪个do方法。 2、servlet生命周期 生命周期：从出生到死亡的过程就是生命周期。对应servlet中的三个方法：init（），service（），destroy（） 默认情况下：第一次接收请求时，这个servlet会进行实例化（调用构造方法）、初始化（调用init（））、然后服务（调用service（）），从第二次请求开始，每一次都是服务，当容器关闭时，其中的所有的servlet实例会被销毁，调用销毁方法。 通过案例我们发现：Servlet实例tomcat只会创建一个，所有的请求都是这个实例去响应。 默认情况下，第一次请求时，tomcat才会去实例化，初始化，然后再服务.这样的好处是什么？提高系统的启动速度，因此得出结论：如果需要提高系统的启动速度，当前默认情况就是这样。如果需要提高响应速度，我们应该设置servlet的初始化时机。 servlet的初始化时机： —-默认是第一次接收请求时，实例化，初始化 —-我们可以通过来设置servlet启动的先后顺序，数字越小，启动越靠前，最小值0。 Servlet是单例的，线程是不安全的。 单例：所有的请求都是同一个实例去响应 线程不安全：一个线程需要根据这个实例中的某个成员变量值去做逻辑判断，但是中间某个时机，另一个线程改变了这个成员变量的值，从而导致第一个线程改变执行路径。因此，尽量不要在servlet中定义成员变量。如果不得不定义成员变量，那么不要去修改成员变量的值，不要根据成员变量的值去做一些逻辑判断。 3、HTTP相关3.1会话跟踪技术 客户端第一次发请求给服务器，服务器获取session，获取不到，则创建新的，然后响应给客户端 下次客户端给服务器发请求时，会把sessionID带给服务器，那么服务器就能获取到了，那么服务器就判断这一次请求和上次相同。 常用的API： request.getSession（）-&gt;获取当前的会话，没有则创建一个新的会话 request.getSession（true）-&gt;效果和不带参数相同 request.getSession（false）-&gt;获取当前会话，没有则返回nu11，不会创建新的 session.getId（）-&gt;获取sessionID session.isNew（）-&gt;判断当前session是否是新的 session.getMaxInactiveInter（）-&gt;session的非激活间隔时长，默认1800秒 session.invalidate（）-&gt;强制性让会话立即失效 3.2session作用域 session保存作用域是和具体的某一个session对应的 常用的API: 123void session.setAttribute（k，v）object session.getAttribute（k）void removeAttribute（k） 3.3服务端内部转发及重定向 服务器内部转发：request.getRequestDispatcher（”…”）.forward（request，response）； 一次请求响应的过程，对于客户端而言，内部经过了多少次转发，客户端是不知道的 地址栏没有变化 客户端重定向：response.sendRedirect（”….”）； 两次请求响应的过程。客户端肯定知道请求UR工有变化 地址栏有变化 3.4session保存作用域原始情况下，保存作用域我们可以认为有四个： page（页面级别，现在几乎不用） request：一次请求响应范围 session：一次会话范围有效 application：一次应用程序范围有效 4、Filter过滤器 过滤器Filter 1）Filter也属于servlet规范 2）Filter开发步骤：新建类实现Filter接口，然后实现其中的三个方法：init、doFilter、destroy配置Filter，可以用注解@webFilter，也可以使用xm1文件 3）Filter在配置时，和servlet一样，也可以配置通配符，例如@WebFilter（”*.do”）表示拦截所有以.do结尾的请求 过滤器链 1）执行的顺序依次是：ABC demo03 C2 B2 A2 2）如果采取的是注解的方式进行配置，那么过滤器链的拦截顺序是按照全类名的先后顺序排序的 3）如果采取的是xm1的方式进行配置，那么按照配置的先后顺序进行排序","categories":[{"name":"Java","slug":"Java","permalink":"https://mrqytalk.github.io/categories/Java/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://mrqytalk.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://mrqytalk.github.io/tags/JavaWeb/"}]}],"categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://mrqytalk.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"Java","slug":"Java","permalink":"https://mrqytalk.github.io/categories/Java/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://mrqytalk.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"操作系统","slug":"操作系统","permalink":"https://mrqytalk.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"笔记","slug":"笔记","permalink":"https://mrqytalk.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"JavaWeb","slug":"JavaWeb","permalink":"https://mrqytalk.github.io/tags/JavaWeb/"}]}