<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mrqyTalk</title>
  
  
  <link href="https://mrqytalk.github.io/atom.xml" rel="self"/>
  
  <link href="https://mrqytalk.github.io/"/>
  <updated>2022-04-17T04:04:21.178Z</updated>
  <id>https://mrqytalk.github.io/</id>
  
  <author>
    <name>吴同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql索引</title>
    <link href="https://mrqytalk.github.io/2022/04/17/mysql%E7%B4%A2%E5%BC%95/"/>
    <id>https://mrqytalk.github.io/2022/04/17/mysql%E7%B4%A2%E5%BC%95/</id>
    <published>2022-04-17T03:57:26.000Z</published>
    <updated>2022-04-17T04:04:21.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Mysql索引简介"><a href="#1-Mysql索引简介" class="headerlink" title="1. Mysql索引简介"></a>1. Mysql索引简介</h2><h3 id="1-1-索引概念"><a href="#1-1-索引概念" class="headerlink" title="1.1 索引概念"></a>1.1 索引概念</h3><p>索引是一个<strong>单独的、存储在磁盘上的、排好序</strong>数据库结构，它们包含着对数据表里所有记录的引用指针。使用索引的功能在于快速找出在某个或多个列中有一特定值的行。</p><h3 id="1-2-索引的分类"><a href="#1-2-索引的分类" class="headerlink" title="1.2 索引的分类"></a>1.2 索引的分类</h3><p>按数据结构分类可分为：<strong>B+tree索引、Hash索引、Full-text索引</strong><br>按物理存储分类可分为：<strong>聚簇索引、二级索引</strong><br>按字段特性分类可分为：<strong>主键索引、普通索引、前缀索引</strong><br>按字段个数分类可分为：<strong>单列索引、联合索引</strong></p><blockquote><p>注：MySQL的索引类型由存储引擎决定，Mysql5.1之前的默认引擎是MyISAM，之后版本是InnoDB。而InnoDB你支持hash索引，但<strong>自适应</strong>Hash索引，即：InnoDB中Hash索引的创建由存储引擎引擎自动优化创建，不能人为干预是否为表创建Hash索引。<strong>因为hash索引只能精确匹配（如select * from user where <code>name</code> &#x3D; xx），不支持范围查找。</strong></p></blockquote><h2 id="2-B-树"><a href="#2-B-树" class="headerlink" title="2. B+树"></a>2. B+树</h2><h3 id="2-1-B-树的特点"><a href="#2-1-B-树的特点" class="headerlink" title="2.1 B+树的特点"></a>2.1 B+树的特点</h3><ul><li><p>在 B+ 树中，<strong>所有数据记录节点都是按照键值的大小存放在同一层的叶子节点上，而非叶子结点只存储key的信息，</strong>这样可以大大减少每个节点的存储的key的数量，降低B+ 树的高度</p></li><li><p>B+ 树叶子节点的关键字从小到大有序排列，<strong>左边结尾数据都会保存右边节点开始数据的指针。</strong></p></li><li><p>B+ 树的层级更少：相较于 B 树， B+ 每个非叶子节点存储的关键字数更多，树的层级更少所以查询数据更快</p></li><li><p>B+ 树查询速度更稳定：B+ 所有关键字数据地址都存在叶子节点上，所以每次查找的次数都相同所以查询速度要比B树更稳定;</p></li><li><p>B+ 树天然具备排序功能：<strong>B+ 树所有的叶子节点数据构成了一个有序链表，在查询大小区间的数据时候更方便，数据紧密性很高，缓存的命中率也会比B树高。</strong></p></li><li><p>B+ 树全节点遍历更快：B+ 树遍历整棵树只需要遍历所有的叶子节点即可，而不需要像 B 树一样需要对每一层进行遍历，这有利于数据库做全表扫描。</p></li></ul><h3 id="2-2-B-树的结构图"><a href="#2-2-B-树的结构图" class="headerlink" title="2.2 B+树的结构图"></a>2.2 B+树的结构图</h3><p><img src="https://cdn.jsdelivr.net/gh/mrqytalk/mrqytalk.github.io@master/image/image-20220417092116463.png" alt="image-20220417092116463"></p><p>Mysql存储的时候以<strong>数据页</strong>为最小单位，数据页与数据页之间通过<strong>双向链表</strong>关联，数据与数据页之间通过<strong>单项链表</strong>关联。</p><p>数据页中的数据是按照主键排序（没有主键是由 MySQL自己维护的 ROW_ID 来排序的），每一个数据页中的页号和最小主键构成<strong>主键目录</strong>。</p><p><strong>索引页+数据页</strong>组成的组成的B+树就是<strong>聚簇索引</strong>。聚簇索引是 MySQL 基于主键索引结构创建的。</p><p>模拟 MySQL 的查找过程，首先从<strong>最顶层的索引页</strong>开始查找，查找 id&#x3D;37，因此定位到了索引页16，然后到索引页 16 中继续查找，此时同样能够定位到 id&#x3D;37 在索引页 3 中，然后继续查找，最终能够定位到数据实在数据页 8 中，加入数据页中8的结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/mrqytalk/mrqytalk.github.io@master/image/image-20220417100149016.png" alt="image-20220417100149016"></p><p>完整的数据表：</p><p><img src="https://cdn.jsdelivr.net/gh/mrqytalk/mrqytalk.github.io@master/image/image-20220417100006747.png" alt="image-20220417100006747"></p><h2 id="3-非主键索引"><a href="#3-非主键索引" class="headerlink" title="3. 非主键索引"></a>3. 非主键索引</h2><p>假如现在对<code>name+age(非主键)</code>建立索引，那此时是存放的呢？此时 MySQL 根据会 name+age 维护一个单独的 B+ 树结构，数据依旧是存放在数据页中的，只不过是原来数据中的每条记录写的是 id&#x3D;xx，现在写的是name&#x3D;xx，age&#x3D;xx，id&#x3D;xx，不管怎么样，主键肯定会存放的。</p><p><img src="https://cdn.jsdelivr.net/gh/mrqytalk/mrqytalk.github.io@master/image/image-20220417094545460.png" alt="image-20220417094545460"></p><p>在插入数据的时候，MySQL 首先会根据 name 进行排序，如果 name 一样，就根据联合索引中的 age 去排序，如果还一样，那么就会根据 主键 字段去排序。插入的原理就是这样子的。</p><p>假设现在要根据 name 查找到该条记录，且查询的字段（即 select 后面的查询字段）也仅仅有 name（只要是在 name,age,id 这三个字段中都可以）这个时候是能够直接获取到最终的记录的。</p><p>但如果查找的sql语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student WHERE name=&#x27;wx&#x27;</span><br></pre></td></tr></table></figure><p>那这下子就完蛋了，因为现在虽然根据 name 很快的定位到了该条记录，但是因为 name+age 不是聚簇索引，此时的 B+ 树的数据页中存放的仅仅是自己关联的索引和主键索引字段，并不会存其他的字段，所以这个时候其他的属性值是获取不到的，这时候该怎么办？</p><p>这种情况下，MySQL 就需要进行<strong>回表</strong>查询了。此时 MySQL 就会根据定位到的某条记录中的 id 再次进行聚簇索引查找，也就是说会根据 id 去维护 id 的 B+ 树中查找。因为聚簇索引中数据页记录的是一条记录的完整的记录，这个过程就叫<strong>回表</strong>。</p><p>回表的含义：<strong>根据非主键索引查询到的结果并没有查找的字段值，此时就需要再次根据主键从聚簇索引的根节点开始查找，这样再次查找到的记录才是完成的。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Mysql索引简介&quot;&gt;&lt;a href=&quot;#1-Mysql索引简介&quot; class=&quot;headerlink&quot; title=&quot;1. Mysql索引简介&quot;&gt;&lt;/a&gt;1. Mysql索引简介&lt;/h2&gt;&lt;h3 id=&quot;1-1-索引概念&quot;&gt;&lt;a href=&quot;#1-1-索引概</summary>
      
    
    
    
    <category term="数据库" scheme="https://mrqytalk.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Mysql" scheme="https://mrqytalk.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>银行家算法</title>
    <link href="https://mrqytalk.github.io/2022/04/16/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/"/>
    <id>https://mrqytalk.github.io/2022/04/16/%E9%93%B6%E8%A1%8C%E5%AE%B6%E7%AE%97%E6%B3%95/</id>
    <published>2022-04-16T12:20:20.000Z</published>
    <updated>2022-04-16T13:40:44.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-银行家算法概念"><a href="#1-银行家算法概念" class="headerlink" title="1.  银行家算法概念"></a>1.  银行家算法概念</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p><strong>银行家算法</strong>（Banker’s Algorithm）是一个避免操作系统<a href="https://zh.wikipedia.org/wiki/%E6%AD%BB%E9%94%81">死锁</a>（Deadlock）的著名算法，属于事先预防策略。它以银行借贷系统的分配策略为基础，判断并保证系统的安全运行。</p><blockquote><p>死锁：当两个以上的运算单元，双方都在等待对方停止执行，以获取系统资源，但是没有一方提前退出时，就称为死锁。</p><p>产生死锁必须<strong>同时满足</strong>以下四个条件：</p><ul><li><p><strong>禁止抢占</strong>（no preemption）：系统资源不能被强制从一个进程中退出。</p></li><li><p><strong>持有和等待</strong>（hold and wait）：一个进程可以在等待时持有系统资源。</p></li><li><p><strong>互斥</strong>（mutual exclusion）：资源只能同时分配给一个行程，无法多个行程共享。</p></li><li><p><strong>循环等待</strong>（circular waiting）：一系列进程互相持有其他进程所需要的资源。</p></li></ul><p>因此，预防死锁需要打破其中一项。</p></blockquote><h3 id="1-2-概括"><a href="#1-2-概括" class="headerlink" title="1.2 概括"></a>1.2 概括</h3><p>当一个进程申请使用资源的时候，银行家算法通过先 <strong>试探</strong> 分配给该进程资源，然后通过安全性算法判断分配后的系统是否处于安全状态，若判断结果为安全，则给该进程分配资源，若不安全则试探分配作废，让该进程阻塞。</p><blockquote><p>安全系列不唯一，但只要存在一个就是安全策略，一定不会发生死锁</p></blockquote><h2 id="2-银行家算法具体实现"><a href="#2-银行家算法具体实现" class="headerlink" title="2. 银行家算法具体实现"></a>2. 银行家算法具体实现</h2><h3 id="2-1-术语概念"><a href="#2-1-术语概念" class="headerlink" title="2.1 术语概念"></a>2.1 术语概念</h3><p><code>available</code>:可用资源向量，记录系统中各类资源的当前可利用数目</p><p><code>allocation</code>:记录每个进程中对各类资源当前的占有量</p><p><code>max</code>:记录每个进程对各类资源的最大需求量</p><p><code>need</code>: 记录每个进程中对各类资源当前的需求量，等于max-allocation</p><p><code>request</code>: 请求向量，记录某个进程当前对各类资源的申请量，是银行家算法的入口参数。</p><h3 id="2-2-过程"><a href="#2-2-过程" class="headerlink" title="2.2 过程"></a>2.2 过程</h3><h4 id="2-2-1-先决条件过程"><a href="#2-2-1-先决条件过程" class="headerlink" title="2.2.1 先决条件过程"></a>2.2.1 先决条件过程</h4><ol><li><code>request[i,j]</code>&lt;<code>need[i,j]</code>，否则进程出错</li><li><code>request[i,j]</code>&lt;<code>available[i,j]</code>，否认进程阻塞</li></ol><h4 id="2-2-2-试探分配过程"><a href="#2-2-2-试探分配过程" class="headerlink" title="2.2.2 试探分配过程"></a>2.2.2 试探分配过程</h4><ol start="3"><li><p>系统试着把资源分配给进程P，并对相应数据结构作如下修改：</p><ul><li><p><code>available[i,j]  -request[i,j]</code></p></li><li><p><code>allocation[i,j]+request[i,j]</code></p></li><li><p><code>need[i,j]-request[i,j]</code></p></li></ul></li><li><p>系统执行安全性检测子算法，以判断试分配后系统状态是否安全；</p></li><li><p>若第4步返回逻辑真值，即“安全”，则完成本次分配，返回；</p></li><li><p>否则，撤销此次（即第3步中的）试分配，进程P阻塞。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-银行家算法概念&quot;&gt;&lt;a href=&quot;#1-银行家算法概念&quot; class=&quot;headerlink&quot; title=&quot;1.  银行家算法概念&quot;&gt;&lt;/a&gt;1.  银行家算法概念&lt;/h2&gt;&lt;h3 id=&quot;1-1-介绍&quot;&gt;&lt;a href=&quot;#1-1-介绍&quot; class=&quot;</summary>
      
    
    
    
    <category term="操作系统" scheme="https://mrqytalk.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="算法" scheme="https://mrqytalk.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="操作系统" scheme="https://mrqytalk.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
