<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>mrqyTalk</title>
  
  
  <link href="https://mrqytalk.github.io/atom.xml" rel="self"/>
  
  <link href="https://mrqytalk.github.io/"/>
  <updated>2022-04-15T12:01:17.064Z</updated>
  <id>https://mrqytalk.github.io/</id>
  
  <author>
    <name>吴同学</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaWeb笔记</title>
    <link href="https://mrqytalk.github.io/2022/04/15/JavaWeb%E7%AC%94%E8%AE%B0/"/>
    <id>https://mrqytalk.github.io/2022/04/15/JavaWeb%E7%AC%94%E8%AE%B0/</id>
    <published>2022-04-15T11:53:47.000Z</published>
    <updated>2022-04-15T12:01:17.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、servlet"><a href="#一、servlet" class="headerlink" title="一、servlet"></a>一、servlet</h2><h3 id="1、servlet继承关系及参数"><a href="#1、servlet继承关系及参数" class="headerlink" title="1、servlet继承关系及参数"></a>1、servlet继承关系及参数</h3><p>1）继承关系：Httpservlet-&gt;Genericservlet-&gt;Servlet </p><p>2）Servlet中的核心方法：init（），service（），destroy（）</p><p>3）服务方法：当有请求过来时，service方法会自动响应（其实是tomcat容器调用的），在HttpServlet中我们会去分析请求的方式：到底是get、post、head还是delete等等，然后再决定调用的是哪个do开头的方法，那么在HttpServlet中这些do方法默认都是405的实现风格—–要我们子类去实现对应的方法，否则默认会报405错误。 </p><p>4）因此，我们在新建servlet时，我们才会去考虑请求方法，从而决定重写哪个do方法。</p><h3 id="2、servlet生命周期"><a href="#2、servlet生命周期" class="headerlink" title="2、servlet生命周期"></a>2、servlet生命周期</h3><ol><li><p>生命周期：从出生到死亡的过程就是生命周期。对应servlet中的三个方法：init（），service（），destroy（）</p></li><li><p>默认情况下：第一次接收请求时，这个servlet会进行实例化（调用构造方法）、初始化（调用init（））、然后服务（调用service（）），从第二次请求开始，每一次都是服务，当容器关闭时，其中的所有的servlet实例会被销毁，调用销毁方法。</p></li><li><p>通过案例我们发现：Servlet实例tomcat只会创建一个，所有的请求都是这个实例去响应。 默认情况下，第一次请求时，tomcat才会去实例化，初始化，然后再服务.这样的好处是什么？提高系统的启动速度，因此得出结论：如果需要提高系统的启动速度，当前默认情况就是这样。如果需要提高响应速度，我们应该设置servlet的初始化时机。</p></li><li><p>servlet的初始化时机： —-默认是第一次接收请求时，实例化，初始化 —-我们可以通过<load-on-startup>来设置servlet启动的先后顺序，数字越小，启动越靠前，最小值0。</p></li><li><p>Servlet是单例的，线程是不安全的。</p><blockquote><p>单例：所有的请求都是同一个实例去响应 线程不安全：一个线程需要根据这个实例中的某个成员变量值去做逻辑判断，但是中间某个时机，另一个线程改变了这个成员变量的值，从而导致第一个线程改变执行路径。因此，<strong>尽量不要在servlet中定义成员变量</strong>。如果不得不定义成员变量，那么<strong>不要去修改成员变量的值</strong>，<strong>不要根据成员变量的值去做一些逻辑判断。</strong></p></blockquote></li></ol><h3 id="3、HTTP相关"><a href="#3、HTTP相关" class="headerlink" title="3、HTTP相关"></a>3、HTTP相关</h3><h4 id="3-1会话跟踪技术"><a href="#3-1会话跟踪技术" class="headerlink" title="3.1会话跟踪技术"></a>3.1会话跟踪技术</h4><ol><li>客户端第一次发请求给服务器，服务器获取session，获取不到，则创建新的，然后响应给客户端</li><li>下次客户端给服务器发请求时，会把sessionID带给服务器，那么服务器就能获取到了，那么服务器就判断这一次请求和上次相同。</li><li>常用的API： request.getSession（）-&gt;获取当前的会话，没有则创建一个新的会话 request.getSession（true）-&gt;效果和不带参数相同 request.getSession（false）-&gt;获取当前会话，没有则返回nu11，不会创建新的 session.getId（）-&gt;获取sessionID session.isNew（）-&gt;判断当前session是否是新的 session.getMaxInactiveInter（）-&gt;session的非激活间隔时长，默认1800秒 session.invalidate（）-&gt;强制性让会话立即失效</li></ol><h4 id="3-2session作用域"><a href="#3-2session作用域" class="headerlink" title="3.2session作用域"></a>3.2session作用域</h4><ol><li><p>session保存作用域是和具体的某一个session对应的</p></li><li><p>常用的API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> session.setAttribute（k，v）</span><br><span class="line">object session.getAttribute（k）</span><br><span class="line"><span class="keyword">void</span> removeAttribute（k）</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-3服务端内部转发及重定向"><a href="#3-3服务端内部转发及重定向" class="headerlink" title="3.3服务端内部转发及重定向"></a>3.3服务端内部转发及重定向</h4><ol><li>服务器内部转发：request.getRequestDispatcher（”…”）.forward（request，response）；<ul><li>一次请求响应的过程，对于客户端而言，内部经过了多少次转发，客户端是不知道的</li><li>地址栏没有变化</li></ul></li><li>客户端重定向：response.sendRedirect（”….”）；<ul><li>两次请求响应的过程。客户端肯定知道请求UR工有变化</li><li>地址栏有变化</li></ul></li></ol><h4 id="3-4session保存作用域"><a href="#3-4session保存作用域" class="headerlink" title="3.4session保存作用域"></a>3.4session保存作用域</h4><p>原始情况下，保存作用域我们可以认为有四个：</p><ul><li>page（页面级别，现在几乎不用）</li><li>request：一次请求响应范围</li><li>session：一次会话范围有效</li><li>application：一次应用程序范围有效</li></ul><h3 id="4、Filter过滤器"><a href="#4、Filter过滤器" class="headerlink" title="4、Filter过滤器"></a>4、Filter过滤器</h3><ol><li><p>过滤器Filter</p><p>1）Filter也属于servlet规范<br>2）Filter开发步骤：新建类实现Filter接口，然后实现其中的三个方法：init、doFilter、destroy配置Filter，可以用注解@webFilter，也可以使用xm1文件<filter><filter-mapping><br>3）Filter在配置时，和servlet一样，也可以配置通配符，例如@WebFilter（”*.do”）表示拦截所有以.do结尾的请求</p></li><li><p>过滤器链<br>1）执行的顺序依次是：ABC demo03 C2 B2 A2</p><p>2）如果采取的是注解的方式进行配置，那么过滤器链的拦截顺序是按照全类名的先后顺序排序的</p><p>3）如果采取的是xm1的方式进行配置，那么按照配置的先后顺序进行排序</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、servlet&quot;&gt;&lt;a href=&quot;#一、servlet&quot; class=&quot;headerlink&quot; title=&quot;一、servlet&quot;&gt;&lt;/a&gt;一、servlet&lt;/h2&gt;&lt;h3 id=&quot;1、servlet继承关系及参数&quot;&gt;&lt;a href=&quot;#1、servlet</summary>
      
    
    
    
    <category term="Java" scheme="https://mrqytalk.github.io/categories/Java/"/>
    
    
    <category term="笔记" scheme="https://mrqytalk.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JavaWeb" scheme="https://mrqytalk.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://mrqytalk.github.io/2022/04/14/hello-world/"/>
    <id>https://mrqytalk.github.io/2022/04/14/hello-world/</id>
    <published>2022-04-14T03:00:47.266Z</published>
    <updated>2022-04-14T03:00:47.267Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
